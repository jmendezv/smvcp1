package pep.mendez.smvcp1.spring.model.repository;

import org.springframework.data.domain.Page;

import pep.mendez.smvcp1.spring.model.entities.User;

/**
 * Spring Data Repositories can be extended
 * 
 * Check JpaConfiguration at pep.mendez.smvcp.spring.config package
 * 
 * It is likely that at some point you will want functionality in your
 * repository that can not be described wtih Spring Data's method-naming
 * convections or even with a query given in the @Query annotation.
 * 
 * In that case, you will need to do it the old-fashioned way: by working with
 * the EntityManage directly. However, you can still let Spring Data JPA do the
 * grunt work for the stuff it knows how to do.
 * 
 * When Spring Data JPA generates the implementation for a repository interface,
 * it also looks for a class whose name is the same as the interface's name
 * postfixed with Impl by default. If the class exists, Spring Data JPA merges
 * its methods with those generated by Spring Data JPA.
 * 
 * AQUI PONEMOS LOS METODOS ADICIONALES QUE QUEREMOS PROPORCIONAR
 * 
 * @author pep
 *
 */

public interface ExtendedUserRepository {

	/**
	 * Enable all users
	 */
	void enableAll();
	
}
