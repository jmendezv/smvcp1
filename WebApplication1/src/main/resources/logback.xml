<?xml version="1.0" encoding="UTF-8"?>
<!-- configuration file for LogBack (slf4J implementation) 
	
Logback tries to find a file called logback.groovy in the classpath.

If no such file is found, logback tries to find a file called logback-test.xml in the classpath.

If no such file is found, it checks for the file logback.xml in the classpath..

If no such file is found, and the executing JVM has the ServiceLoader (JDK 6 and above) the ServiceLoader will be used to resolve an implementation of com.qos.logback.classic.spi.Configurator. The first implementation found will be used. See ServiceLoader documentation for more details.

If none of the above succeeds, logback configures itself automatically using the BasicConfigurator which will cause logging output to be directed to the console.	
	
scanPeriod attribute of the <configuration> element. Values can be specified in units of milliseconds, seconds, minutes or hours. 	

A logger is configured using the <logger> element.

A <logger> element takes exactly one mandatory name attribute, an optional level attribute, and an optional additivity attribute

INHERITED, or NULL, will force the level of the logger to be inherited from higher up in the hierarchy

The <logger> element may contain zero or more <appender-ref> elements

level attribute can be one of case-insensitive string values TRACE, DEBUG, INFO, WARN, ERROR, ALL or OFF

The <root> element configures the root logger. 

It supports a single attribute, namely the level attribute. 

It does not allow any other attributes because the additivity flag does not apply to the root logger. 

Moreover, since the root logger is already named as "ROOT", it does not allow a name attribute either. 

The value of the level attribute can be one of the case-insensitive strings TRACE, DEBUG, INFO, WARN, ERROR, ALL or OFF. 

Note that the level of the root logger cannot be set to INHERITED or NULL.

The <root> element may contain zero or more <appender-ref> elements

Suppose we are no longer interested in seeing any DEBUG messages from any component belonging to the "pep.mendez.webapplication.model" package.

<logger name="pep.mendez.webapplication.model" level="INFO"/>

You can configure the levels of as many loggers as you wish:

<logger name="pep.mendez.webapplication.model.dao" level="ERROR"/>

An appender is configured with the <appender> element, which takes two mandatory attributes name and class. 

The <appender> element may contain zero or one <layout> elements, zero or more <encoder> elements and zero or more <filter> elements. 

Setting the context name is a simple and straightforward method in order to distinguish between multiple applications logging to the same target.

During substitution, properties are looked up in the local scope first, in the context scope second, in the system properties scope third, and in the OS environment fourth and last.

	-->
<configuration debug="true" scan="true" scanPeriod="30 seconds">
	
	 <!-- include file="src/main/java/whatever.xml"/ -->
	 
	 <!-- include resource="includedConfig.xml"/ -->
	 
	 <!-- include url="http://some.host.com/includedConfig.xml" optional="true" / -->
	
	<!-- Default context name is 'default' -->
	<contextName>WebApplication1</contextName>

	<!-- 
	propagates changes made to the level of any logback-classic logger onto the java.util.logging framework
	Such propagation eliminates the performance impact of disabled log statements. 
	
	-->

	<contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
		<resetJUL>true</resetJUL>
	</contextListener>

	<!-- To enable JMX Management -->
	<jmxConfigurator />
	
	<!-- 
	Variable definition 
	also through java execution java -DUSER_HOME="/home/pep" MyApp2
	Scope can be local, context or application
	A property with local scope exists from the point of its definition in a configuration file until the end of interpretation/execution of said configuration file.
	A property with context scope is inserted into the context and lasts as long as the context or until it is cleared
	A property with system scope is inserted into the JVM's system properties and lasts as long as the JVM or until it is cleared. 
	-->
	
	<property scope="local" name="USER_HOME" value="/home/pep" />
	
	<!-- You may also reference a resource in the class path instead of a file? -->
	
	<property name="messages" resource="resource1.properties" />
	
	<define name="existsMessages" class="ch.qos.logback.core.property.FileExistsPropertyDefiner">
		<path>${messages}</path>
	</define>
	
	<!--if condition="">
		<then></then>
		<else></else>
	</if -->

	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!-- default encoder -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>
	
	<appender name="FILE" class="ch.qos.logback.core.FileAppender">
    		<file>${USER_HOME}/myApp.log</file>
    		<encoder>
      			<pattern>%msg%n</pattern>
    		</encoder>
  	</appender>

	<!--<logger name="org.hibernate" level="debug"/> -->
	<!-- Uncomment and add your logger here: <logger name="org.springframework.samples.service.service" 
		level="debug"/> -->

	<!-- You can turn root level off level="OFF" -->

	<root level="info">
		<appender-ref ref="console" />
	</root>
</configuration>
