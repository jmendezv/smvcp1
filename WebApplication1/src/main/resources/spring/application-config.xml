<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- Configures a handler for serving static resources such as images, js, 
		and, css files -->

	<mvc:resources location="/resources/" mapping="/resources/**" />

	<!-- Interceptors -->

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/login.html" />
			<bean class="pep.mendez.webapplication1.interceptor.LoginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- Enable the @Controller model -->

	<mvc:annotation-driven enable-matrix-variables="true" />


	<!-- Enable AspectJ class or interface based (CGLIB) proxies. If the class 
		of a target object that is to be proxied doesn’t implement any interfaces, 
		then a CGLIB-based proxy will be created. JDK proxies are interface based, 
		and no interfaces means JDK proxying isn’t even possible -->

	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- Check this packages and subpackages for Spring objects and register 
		them -->

	<context:component-scan base-package="pep.mendez.webapplication1" />

	<!-- Load several properties files, could be from class path -->

	<context:property-placeholder
		location="/WEB-INF/config/jdbc.properties, /WEB-INF/config/hibernate.properties" />

	<!-- Enable auto Transactions -->

	<tx:annotation-driven transaction-manager="txManager" />

	<!-- Load custom validation error messages, should not be from class path -->

	<!-- Config data source -->

	<!-- bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"> 
		<property name="basename" value="/WEB-INF/config/messages" /> <property name="defaultEncoding" 
		value="UTF-8" /> <property name="cacheSeconds" value="60" /> </bean -->

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
		p:basename="/WEB-INF/config/messages" p:defaultEncoding="UTF-8"
		p:cacheSeconds="60" />

	<!-- bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" 
		destroy-method="close" -->

	<!-- com.mysql.jdbc.jdbc2.optional.MysqlDataSource -->

	<!-- com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource -->

	<!-- org.springframework.jdbc.datasource.DriverManagerDataSource -->

	<bean id="dataSource"
		class="com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource">
		<!-- property name="driverClassName" value="${jdbc.driverClassName}" / -->
		<property name="url" value="${jdbc.url}" />
		<!-- property name="username" value="${jdbc.username}" / -->
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- Config EntityManagerFactory, no persistence.xml needed -->

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="PU1" />
		<property name="packagesToScan" value="pep.mendez.webapplication1.model.entity" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
			</props>
		</property>
	</bean>

	<!-- Config JpaTransactionManager -->

	<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Student Data Access Object -->

	<bean id="studentDAO" class="pep.mendez.webapplication1.model.dao.StudentDAOImpl">
	</bean>

	<!-- Transactional Student Service -->

	<bean id="studentService" class="pep.mendez.webapplication1.service.StudentServiceImpl"
		autowire="byName">
	</bean>

	<!-- Logger Aspect. It must be prensent in order to be active -->

	<bean class="pep.mendez.webapplication1.aop.LoggerAspect" />


	<bean id="persistenceExceptionTranslationPostProcessor"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

</beans>
